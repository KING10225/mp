10. Implement the EM algorithm to cluster a set of data stored in a .CSV file. Use the same data 
set for clustering using the k-Means algorithm.

import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn import metrics
import pandas as pd
import numpy as np

iris = load_iris()
X = pd.DataFrame(iris.data, columns=['Sepal_Length', 'Sepal_Width', 'Petal_Length', 'Petal_Width'])
y = pd.DataFrame(iris.target, columns=['Targets'])

plt.figure(figsize=(14, 7))
colormap = np.array(['red', 'lime', 'black'])

plt.subplot(1, 3, 1)
plt.scatter(X.Petal_Length, X.Petal_Width, c=colormap[y.Targets], s=40)
plt.title('Real Classification')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')

from sklearn.cluster import KMeans
model = KMeans(n_clusters=3, random_state=0, n_init='auto') 
model.fit(X)

plt.subplot(1, 3, 2)
plt.scatter(X.Petal_Length, X.Petal_Width, c=colormap[model.labels_], s=40)
plt.title('K-Mean Classification')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')

print("The accuracy score of K-Mean:", metrics.accuracy_score(y.Targets, model.labels_))
print("The confusion matrix of K-Mean:\n", metrics.confusion_matrix(y.Targets, model.labels_))


from sklearn.mixture import GaussianMixture
gmm = GaussianMixture(n_components=3, random_state=0)
gmm.fit(X)
y_gmm = gmm.predict(X)

plt.subplot(1, 3, 3)
plt.scatter(X.Petal_Length, X.Petal_Width, c=colormap[y_gmm], s=40)
plt.title('GMM Classification')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')

plt.tight_layout()
plt.show()

print("The accuracy score of EM:", metrics.accuracy_score(y.Targets, y_gmm))
print("The confusion matrix of EM:\n", metrics.confusion_matrix(y.Targets, y_gmm))
